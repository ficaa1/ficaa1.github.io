# This workflow is for building a Jekyll site and deploying it to GitHub Pages.
# It uses certified GitHub Actions for robust and up-to-date functionality.
name: Deploy Jekyll site to Pages

on:
  # Triggers the workflow on pushes to the main or master branch
  push:
    branches: ["main", "master"]
    paths-ignore:
      - .gitignore
      - README.md
      - LICENSE

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# We explicitly cancel in-progress runs as this is a deployment workflow.
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4 # Use v4 for actions/checkout
        with:
          fetch-depth: 0 # Useful for Jekyll if you need full history, e.g., for posts dates

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1.163.0 # Use the latest recommended version
        with:
          ruby-version: '3.1' # Ensure this matches your Jekyll environment (or remove if using .ruby-version)
          bundler-cache: true # Installs and caches gems
          cache-version: 1 # Increment this number if you change Gemfile/Ruby version and need to re-download gems

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v3 # v3 is current for configure-pages

      - name: Build with Jekyll
        # Jekyll builds to './_site' by default. The --baseurl ensures proper linking
        # when deployed to a GitHub Pages subdirectory (like username.github.io/repo-name).
        run: bundle exec jekyll build --baseurl "${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: production # Optimize Jekyll for production builds

      - name: Run HTMLProofer
        # Uses --disable-external to skip external link checks (which can be slow/unreliable in CI)
        # and --check-html to lint HTML.
        # Ensure you have 'html-proofer' in your Gemfile if you use this.
        run: bundle exec htmlproofer _site --disable-external --check-html --allow_hash_href
        continue-on-error: true # Allow deployment even if some checks fail

      - name: Upload artifact
        # This action automatically uploads the './_site' directory by default.
        # This is the crucial update to v2 for artifacts.
        uses: actions/upload-pages-artifact@v3
        with:
          path: '_site' # The path to the directory containing your static site files

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build # Ensures the build job completes successfully first
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2 # This is the crucial update for deployment
